version: "3.8"

secrets:
  kong_db_password:
    file: ./kong_db_password.txt
  mysql_root_password:
    file: ./mysql_root_password.txt
  mysql_password:
    file: ./mysql_password.txt
  redis_password:
    file: ./redis_password.txt

x-common-env:
  &common-env
  KONG_PG_HOST: kong-database
  KONG_PG_USER: kong
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_db_password

networks:
  default:

volumes:
  mysql-data: {}
  kong-data: {}

services:
  kong-gateway:
    build: ../../kong/
    image: kong-service:1.0
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      <<: *common-env
      KONG_DATABASE: postgres
      KONG_PLUGINS: authn-kong
    ports:
      - "8000:8000" # Proxy
      - "8001:8001" # Admin API
      - "8443:8443" # Proxy SSL
      - "8444:8444" # Admin API SSL
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - kong_db_password
    restart: on-failure


  kong-database:
    image: postgres:latest
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_db_password
    volumes:
      - kong-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    read_only: false
    secrets:
      - kong_db_password

  mysqldb:
    image: mysql:8.0.29
    environment:
      MYSQL_DATABASE: "my_db"
      MYSQL_PASSWORD: "password"
      MYSQL_ROOT_PASSWORD: "password"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/mysqldb_update_privileges.sh:/docker-entrypoint-initdb.d/mysqldb_update_privileges.sh
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 20s
        retries: 10
    read_only: false

  cache-service:
    image: redis:7.2-rc2-alpine3.18
    command: ["redis-server", "--requirepass", "$(cat /run/secrets/redis_password)"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "/run/secrets/redis_password", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    secrets:
      - redis_password

  service-one:
    build: ../../downstream-services/service-one
    image: service-one:1.0
    depends_on:
      - kong-gateway

  service-two:
    build: ../../downstream-services/service-two
    image: service-two:1.0
    depends_on:
      - kong-gateway
  
  service-three:
    build: ../../downstream-services/service-three
    image: service-three:1.0
    depends_on:
      - kong-gateway

  auth-service:
    build: ../../authentication
    image: auth-service:1.0
    depends_on:
      mysqldb:
        condition: service_healthy
      kong-gateway:
      # remember to change this to healthy. Currently is unhealthy
        condition: service_started 
      cache-service:
        condition: service_healthy

  frontend-client:
    build: ../../frontend
    image: client:1.0
    depends_on:
      - kong-gateway
    ports:
      - "8080:3000"

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      <<: *common-env
    secrets:
      - kong_db_password
    networks:
      - default
    profiles:
        - donotstart

  kong-migrations-up:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_started
    environment:
      <<: *common-env
    secrets:
      - kong_db_password
    networks:
      - default
    profiles:
        - donotstart
    