AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus ARN
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name

Globals:
  Function:
    Runtime: python3.9
    Architectures:
      - arm64
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        LOG_LEVEL: !Ref LogLevel
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:1"

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-UserPool"
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]
      Schema:
        - Name: email
          Required: true
          Mutable: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${Environment}-UserPoolClient"
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      # Add callback URLs and logout URLs
      # CallbackURLs: []
      # LogoutURLs: []
      SupportedIdentityProviders:
        - COGNITO
        - Google
      # Other necessary configurations for Google OAuth2

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${Environment}-userpool-domain"
      UserPoolId: !Ref UserPool

  UserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Environment}/users/user-pool/id
      Type: String
      Value: !Ref UserPool

  UserPoolArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Environment}/users/user-pool/arn
      Type: String
      Value: !GetAtt UserPool.Arn

  SignUpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SignUpFunction}"
      RetentionInDays: !Ref RetentionInDays

  # Additional resources like Lambda functions and EventBridge rules
  # would be added here depending on your specific logging and event handling needs.

Outputs:
  UserPoolId:
    Description: "ID of the Cognito user pool"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "ID of the Cognito user pool client"
    Value: !Ref UserPoolClient
  UserPoolDomain:
    Description: "Domain of the Cognito user pool"
    Value: !Ref UserPoolDomain
